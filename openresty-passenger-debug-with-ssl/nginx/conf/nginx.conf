worker_processes 1;

worker_rlimit_core  500M;
worker_rlimit_nofile 100000;

working_directory /tmp;

events {
  worker_connections 4096;
}

http {
  passenger_root /var/lib/gems/2.2.0/gems/passenger-5.0.23;

  types {
    image/bmp                             bmp;
    image/gif                             gif;
    image/jpeg                            jpeg jpg;
    image/png                             png;
    image/svg+xml                         svg svgz;
    image/tiff                            tif tiff;
    image/vnd.wap.wbmp                    wbmp;
    image/webp                            webp;
    image/x-jng                           jng;

    text/css                              css;
    text/html                             htm html shtml;

    application/javascript                js;
  }

  default_type text/html;

  access_log off;

  lua_package_path "$prefix/lualib/?.lua;;";

  lua_shared_dict locks 1M;
  lua_shared_dict cache 10M;

  # see https://github.com/openresty/lua-resty-core
  init_by_lua '
    require "resty.core"
  ';

  keepalive_timeout 65;

  server {
    listen 80;
    server_name localhost;

    root /app/src/public;
    
    passenger_ruby /usr/bin/ruby;

    passenger_base_uri /;

    location / {
      passenger_enabled on;
    }

    location /lua-capture-passenger {
      content_by_lua '
         local res = ngx.location.capture("/")

         if res then
             ngx.say("status: ", res.status)
             ngx.say("body:")
             ngx.print(res.body)
         end
      ';
    }

    location /lua-capture-cosocket {
      content_by_lua '
         local res = ngx.location.capture("/lua-cosocket")
         if res then
             ngx.say("status: ", res.status)
             ngx.say("body:")
             ngx.print(res.body)
         end
      ';
    }

    location /lua-capture-static {
      content_by_lua '
         local res = ngx.location.capture("/blabla.txt")
         if res then
             ngx.say("status: ", res.status)
             ngx.say("body:")
             ngx.print(res.body)
         end
      ';
    }

    location /lua-cosocket {
      content_by_lua '
        local http = require "resty.http"
        local httpc = http.new()
        local res, err = httpc:request_uri("http://127.0.0.1:80/", {
          method = "GET"
        })

        if not res then
          ngx.say("failed to request: ", err)
          return
        end

        ngx.status = res.status

        ngx.say(res.body)
      ';
    }
  }
}